*Soluções para configuração de ambiente*

1. **Definir Linguagem e Versão**:

    - O projeto utiliza **Python 3.11.6**. Isso deve ser garantido para que todos os membros da equipe utilizem a mesma versão, evitando conflitos de dependências.
2. **Instalar Bibliotecas e Dependências**:

Bibliotecas utilizadas até o momento:

**Django**: Framework web para desenvolvimento rápido de aplicativos, incluindo funcionalidades de front-end e back-end.

**Allauth**: Biblioteca de autenticação para gerenciar login, registro e integração com redes sociais.

**Asgiref**: Fornece interfaces de comunicação assíncrona para suportar o Django em sistemas de alta concorrência.

**Charset_normalizer**: Normaliza o conjunto de caracteres, geralmente usada para manipulação de strings de texto.

**idna**: Biblioteca para manipulação de nomes de domínio internacionalizados (IDN).

**pip**: Gerenciador de pacotes para instalar bibliotecas Python.

**psycopg2**: Conector para PostgreSQL, usado para interação com bancos de dados.

**request**: Biblioteca para fazer requisições HTTP de forma simples.

**sqlparse**: Biblioteca para analisar e formatar consultas SQL.

**urllib3**: Biblioteca para gerenciar conexões HTTP e facilitar o uso de URLs.

**certifi**: Biblioteca que fornece certificados SSL confiáveis, garantindo a segurança das conexões HTTPS e protegendo contra interceptações.

- Para instalar todas as bibliotecas do projeto, use o comando `make install` ou, se o arquivo `requirements.txt` estiver disponível, execute:
    
    ```bash
    pip install -r requirements.txt
    
    ```
    
- Essas bibliotecas incluem Django, psycopg2, allauth, entre outras, essenciais para o funcionamento do projeto.

**Mais sobre o make install**

O comando `make install` é uma forma automatizada de instalar dependências do projeto. Ele utiliza um arquivo chamado `Makefile`, onde você pode definir instruções e tarefas que o sistema deve executar. Quando você roda `make install`, o `make` vai procurar por essas instruções no `Makefile` e executá-las, como por exemplo, rodar `pip install -r requirements.txt` para instalar todas as bibliotecas necessárias. É uma maneira prática de garantir que todas as dependências sejam instaladas de forma consistente.

3. **Configurar Variáveis de Ambiente**:

Variáveis de ambiente são usadas para configurar parâmetros de execução sem a necessidade de modificar o código. Elas armazenam informações como credenciais, configurações do sistema, chaves de API, entre outros dados sensíveis. Esses valores são lidos pelo código durante a execução, garantindo que as informações não fiquem expostas no código-fonte e facilitem a comunicação da aplicação com o banco de dados de forma flexível.

- Crie um arquivo `.env` na raiz do projeto para armazenar variáveis de ambiente sensíveis, como configurações de banco de dados e chaves de API. Exemplo de variáveis a configurar:
    - `DEBUG=True` para o modo de desenvolvimento.
    - `DB_NAME=nome_do_banco`, `DB_USER=usuario`, `DB_PASSWORD=senha`.
- O Django carrega essas variáveis de ambiente automaticamente com a ajuda de pacotes como `python-dotenv`.

4. **Definir Conexões com Banco de Dados**:

- O projeto usa **PostgreSQL** como banco de dados.
- As configurações do banco são feitas no arquivo `settings.py` do Django. Certifique-se de que as variáveis de ambiente relacionadas ao banco de dados (como `DB_NAME`, `DB_USER`, `DB_PASSWORD`, `DB_HOST`) estejam corretamente configuradas no `.env`.
- Para rodar o banco de dados, utilize Docker, com o comando:
Isso iniciará o contêiner do PostgreSQL e o Django se conectará automaticamente ao banco.
    
    ```bash
    docker-compose up
    
    ```
    
5. **Configurar Ferramentas de Desenvolvimento**:

    - **VSCode**: Certifique-se de que a equipe tenha as extensões necessárias instaladas, como Python, Django, Pylint, etc.
    - **Docker**: O Docker deve ser instalado localmente no sistema de cada desenvolvedor (Linux, Windows ou macOS). Isso garante que todos tenham o ambiente de execução idêntico.
        - Para instalar o Docker no Linux, por exemplo:
            
            ```bash
            sudo apt install docker.io
            
            ```
            
6. **Ajustar Integração com Serviços Externos**:

    - Caso o projeto utilize APIs externas (como Google Maps ou possíveis ambientes de pagamento), as chaves de API devem ser configuradas no arquivo `.env`.
    - Exemplo:
        - `GOOGLE_API_KEY=chave_da_google_api`
        - Certifique-se de que essas variáveis estejam documentadas para os outros membros da equipe.
