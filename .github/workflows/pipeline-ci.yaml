# Nome do workflow
name: CI/CD Workflow

# Definir quando o workflow será executado
on:
  push:
    branches: 
      - main # Executa o workflow ao push na branch 'main'
      - 154-taskautomação-pipeline-ci-com-testes
  pull_request:
    branches: 
      - main # Exgsfdghdfecuta o workflow ao abrir um PR na branch 'main'

# Definindo os jobs
jobs:
  # Job para rodar os testes
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        # O GitHub Actions faz bind automático e a URL do serviço fica "localhost"
    
    env:
      # Variáveis que o Django (settings.py) vai ler via decouple.config()
      DB_NAME: ${{ secrets.POSTGRES_DB }}
      DB_USER: ${{ secrets.POSTGRES_USER }}
      DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_HOST: localhost
      DB_PORT: '5432'
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r API/requirements.txt
          pip install pytest pytest-django

      - name: List project files (for debugging)
        run: |
          ls -R API/
      
      - name: Run tests
        run: |
          pytest API/